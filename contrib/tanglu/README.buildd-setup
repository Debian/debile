== Setting up a Tanglu buildd ==

=== 1. Install dependencies ===
On your newly installed Debian Wheezy machine, install the buildd dependencies:

 apt-get install sudo devscripts dpkg-dev eatmydata sbuild/jessie schroot dput-ng \
    python-dput python-debian python-requests python-yaml python-schroot/jessie python-sqlalchemy/jessie python-virtualenv

Then install Tanglu debootstrap, Tanglu lintian and the Tanglu Archive Keyring:
 wget http://archive.tanglu.org/tanglu/pool/main/d/debootstrap/debootstrap_1.0.59tanglu1_all.deb \
    http://archive.tanglu.org/tanglu/pool/main/l/lintian/lintian_2.5.22.1tanglu1_all.deb \
    http://archive.tanglu.org/tanglu/pool/main/t/tanglu-archive-keyring/tanglu-archive-keyring_2013.02_all.deb
 dpkg -i debootstrap_*tanglu*_all.deb lintian_*tanglu*_all.deb tanglu-archive-keyring_*_all.deb
 apt-get install -f

=== 2. Set up buildd user ===
Create new buildd user:
 adduser --home=/srv/buildd --ingroup sbuild buildd

NOTE: The user name and HOME path are currently hardcoded in some scripts, so please don't change them.

=== 3. Create base environments ===
Create the sbuild base environments by following these instructions as root.
These instructions must be followed twice, once for amd64 and once for i386, to be able to build packages for both architectures.

 :: i386 builder:
   export STABLE=aequorea DEVEL=bartholomea ARCH=i386

 :: amd64 builder:
   export STABLE=aequorea DEVEL=bartholomea ARCH=amd64

 :: /srv/buildd is on btrfs:
   mkdir -p /srv/buildd/chroots /srv/buildd/snapshots
   btrfs subvolume create /srv/buildd/chroots/${STABLE}-${ARCH}
   btrfs subvolume create /srv/buildd/chroots/${DEVEL}-${ARCH}
   sbuild-createchroot --arch=${ARCH} --components="main,contrib,non-free" ${STABLE} /srv/buildd/chroots/${STABLE}-${ARCH} http://archive.tanglu.org/tanglu
   sbuild-createchroot --arch=${ARCH} --components="main,contrib,non-free" ${DEVEL} /srv/buildd/chroots/${DEVEL}-${ARCH} http://archive.tanglu.org/tanglu
   btrfs subvolume snapshot /srv/buildd/chroots/${DEVEL}-${ARCH} /srv/buildd/chroots/staging-${ARCH}

 :: /srv/buildd is *not* on btrfs:
   mkdir -p /srv/buildd/chroots
   sbuild-createchroot --arch=${ARCH} --components="main,contrib,non-free" --make-sbuild-tarball=/srv/buildd/chroots/${STABLE}-${ARCH}.tar.gz ${STABLE} `mktemp -d` http://archive.tanglu.org/tanglu
   sbuild-createchroot --arch=${ARCH} --components="main,contrib,non-free" --make-sbuild-tarball=/srv/buildd/chroots/${DEVEL}-${ARCH}.tar.gz ${DEVEL} `mktemp -d` http://archive.tanglu.org/tanglu
   cp /srv/buildd/chroots/${DEVEL}-${ARCH}.tar.gz /srv/buildd/chroots/staging-${ARCH}.tar.gz

 :: all builders:
   mv /etc/schroot/chroot.d/${STABLE}-${ARCH}-sbuild-* /etc/schroot/chroot.d/${STABLE}-${ARCH}
   mv /etc/schroot/chroot.d/${DEVEL}-${ARCH}-sbuild-* /etc/schroot/chroot.d/${DEVEL}-${ARCH}
   cp /etc/schroot/chroot.d/${DEVEL}-${ARCH} /etc/schroot/chroot.d/staging-${ARCH}

   sed -e "s,${STABLE}-${ARCH}-sbuild,${STABLE}-${ARCH},g" -i /etc/schroot/chroot.d/${STABLE}-${ARCH}
   sed -e "s,${DEVEL}-${ARCH}-sbuild,${DEVEL}-${ARCH},g" -i /etc/schroot/chroot.d/${DEVEL}-${ARCH}
   sed -e "s,${DEVEL}-${ARCH}-sbuild,staging-${ARCH},g" -e "s,${DEVEL},staging,g" -i /etc/schroot/chroot.d/staging-${ARCH}

 :: /srv/buildd is on btrfs:
   for SUITE in ${STABLE} ${DEVEL} staging; do
       sed -E -e 's,^type=directory$,type=btrfs-snapshot,' -e 's,^directory=(.+)$,btrfs-source-subvolume=\1\nbtrfs-snapshot-directory=/srv/buildd/snapshots,' -i /etc/schroot/chroot.d/${SUITE}-${ARCH}
       rm /srv/buildd/chroots/${SUITE}-${ARCH}/dev/ptmx
       ln -s pts/ptmx /srv/buildd/chroots/${SUITE}-${ARCH}/dev/ptmx
       echo force-unsafe-io >/srv/buildd/chroots/${SUITE}-${ARCH}/etc/dpkg/dpkg.cfg.d/90sbuild
   done

   echo "deb http://archive.tanglu.org/tanglu aequorea-updates main contrib non-free"     >>/srv/buildd/chroots/${STABLE}-${ARCH}/etc/apt/sources.list
   echo "deb-src http://archive.tanglu.org/tanglu aequorea-updates main contrib non-free" >>/srv/buildd/chroots/${STABLE}-${ARCH}/etc/apt/sources.list
   echo "deb http://archive.tanglu.org/tanglu staging main contrib non-free"     >>/srv/buildd/chroots/staging-${ARCH}/etc/apt/sources.list
   echo "deb-src http://archive.tanglu.org/tanglu staging main contrib non-free" >>/srv/buildd/chroots/staging-${ARCH}/etc/apt/sources.list

 :: /srv/buildd is *not* on btrfs:
   # Log into the newly created stable environment:
   sbuild-shell ${STABLE}-${ARCH}
   # And run these commands:
   rm /dev/ptmx
   ln -s pts/ptmx /dev/ptmx
   echo force-unsafe-io >/etc/dpkg/dpkg.cfg.d/90sbuild
   echo "deb http://archive.tanglu.org/tanglu aequorea-updates main contrib non-free" >>/etc/apt/sources.list
   echo "deb-src http://archive.tanglu.org/tanglu aequorea-updates main contrib non-free" >>/etc/apt/sources.list
   exit

   # Log into the newly created devel environment:
   sbuild-shell ${STABLE}-${ARCH}
   # And run these commands:
   rm /dev/ptmx
   ln -s pts/ptmx /dev/ptmx
   echo force-unsafe-io >/etc/dpkg/dpkg.cfg.d/90sbuild
   exit

   # Log into the newly created staging environment:
   sbuild-shell staging-${ARCH}
   # And run these commands:
   rm /dev/ptmx
   ln -s pts/ptmx /dev/ptmx
   echo force-unsafe-io >/etc/dpkg/dpkg.cfg.d/90sbuild
   echo "deb http://archive.tanglu.org/tanglu staging main contrib non-free" >>/etc/apt/sources.list
   echo "deb-src http://archive.tanglu.org/tanglu staging main contrib non-free" >>/etc/apt/sources.list
   exit

 :: all builders:
   sbuild-update --update --upgrade --clean ${STABLE}-${ARCH} ${DEVEL}-${ARCH} staging-${ARCH}

   cp /etc/schroot/chroot.d/${STABLE}-${ARCH} /etc/schroot/chroot.d/${STABLE}-updates-${ARCH}
   sed -E -e "s/^\[${STABLE}-${ARCH}\]\$/[${STABLE}-updates-${ARCH}]/" -i /etc/schroot/chroot.d/${STABLE}-updates-${ARCH}

=== 4. Generate builder keys ===
Note: The rng-tools and urandom may help if you don't have enough entropy
(use with care and inform yourself about what these tools do before using them!).

Login as the buidd user:
 sudo -u buildd -i

Create a local apt key for sbuild:
 sbuild-update --keygen

Create a package signing pgp key:
 gpg --gen-key

Select RSA(4) and a length of 4096 bit.
You got the name of an element as buildd name.
The name should be: "Tanglu <element> Buildd", e.g. "Tanglu Helium Buildd".
The email address should be "<element>@buildd.tanglu.org", e.g. "helium@buildd.tanglu.org".
Set expiration date to 1-5 years, don't use a passphrase.

Export the pgp public key:
 gpg --armor --export "<element>@buildd.tanglu.org" >/srv/buildd/<element>.pgp

Create a debile xmlrpc ssl key and cert:
 openssl req -utf8 -nodes -newkey rsa:4096 -sha256 -x509 -days 7300 -subj "/C=NT/O=Tanglu Project/OU=Package Build Service/CN=<element>/emailAddress=<element>@buildd.tanglu.org" -keyout /srv/buildd/<element>.key -out /srv/buildd/<element>.crt && chmod go-rwx /srv/buildd/*.key

=== 6. Install buildd software ===
Clone the Tanglu debile software:
 git clone git://gitorious.org/tanglu/debile.git debile-git
(ideally in /srv/buildd)

Then create a new Python virtualenv in the cloned debile directory:
 virtualenv --system-site-packages ENV
Activate the virtualenv:
 source ENV/bin/activate
Then install other dependencies:
 pip install -r requirements-slave.txt
Then run:
 make develop
 (FIXME: Better use "productive" and slave-only setting here?)

Please keep the Git clone up-to-date and install new software versions from time to time.

=== 7. Configure buildd software ===
Copy the tanglu-buildd certificate to /srv/buildd/tanglu-buildd.crt
Modify /etc/sbuild/sbuild.conf to contain:
$resolve_alternatives = 1;
$build_environment = {
    'DEB_BUILD_OPTIONS' => 'parallel=5'
};

Note: Change 'parallel=5' to suite your machine, "num physical cpu cores + 1" or "num logical cpu cores - 1" is usually a suitable value.
Also be aware that many jobs ignore this setting, and only uses a single core, so if you have a powerful machine with plenty of RAM/HDD, please consider runing multiple debile-slave instances with a lower "parallel=" setting instead.

Create /etc/debile/slave.yaml using the template below.
Change the file to match your builder specifications.
You will have to set GPGKEY_FINGERPRINT to the full fingerpint of the GPG-key you created
for this builder.
### FILE STARTS ###
---
xmlrpc:
    host: buildd.tanglu.org
    port: 22017
    keyfile: /srv/buildd/<element>.key
    certfile: /srv/buildd/<element>.crt
    ca_certs: /srv/buildd/tanglu-buildd.crt

gpg: GPGKEY_FINGERPRINT

dput:
    host: tanglu

checks:
    - lintian
    - build

arches:
    - amd64
    - i386

suites:
    - staging
    - bartholomea
    - aequorea
    - aequorea-updates

components:
    - main
    - contrib
    - non-free
### EOF ###

=== 8. Configure dput-ng ===
Create /etc/dput.d/profiles/tanglu.json with the following data:
### BEGIN FILE ###
{
    "allow_dcut": false,
    "allowed-distribution": {},
    "codenames": null,
    "hooks": [
        "checksum",
        "gpg"
    ]
}
### EOF ###

Create /etc/dput.d/metas/tanglu.json with the following data:
### BEGIN FILE ###
{
    "fqdn": "ftp-master.tanglu.org",
    "incoming": "~/incoming/",
    "login": "anonymous",
    "meta": "tanglu",
    "method": "ftp"
}
### EOF ###

=== 9. Create initscript for debile-slave ===
copy debian/debile-slave.init to /etc/init.d/debile-slave
add ". /srv/buildd/debile-git/ENV/bin/activate" after "export PATH=..."
change "DEBILE=..." to "DEBILE=/srv/buildd/debile-git/ENV/bin/$BASE"
change "DEBILE_USER=..." to "DEBILE_USER=buildd"

=== 10. Register the buildd ===
Tell the build-master admin (currently Matthias Klumpp <mak@debian.org>) about the new buildd and give him or the build admin team access
to the machine.
In the process, some generic settings will be checked and we will perform a testbuild, then add the machine to the buildd pool and register it's key
with the archive kit.
Don't forget to send your PGP public key and SSL certificate generated in step 6 with your mail, so we can add it to the build master's keyring and allow your slave to connect.

And you're done!

NOTE: Check if builds work before disabling maintenance mode on the buildmaster!
