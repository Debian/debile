== Setting up a Tanglu buildd ==

=== 1. Install dependencies ===
On your newly installed Debian Wheezy machine, install the buildd dependencies:

 apt-get install sudo devscripts dpkg-dev eatmydata sbuild python-dput dput-ng python-debian \
				python-schroot python-requests python-virtualenv python-sqlalchemy

Then install the Tanglu Archive Keyring and the Tanglu debootstrap:
wget:
http://archive.tanglu.org/tanglu/pool/main/d/debootstrap/debootstrap_1.0.48tanglu2.1_all.deb
http://archive.tanglu.org/tanglu/pool/main/t/tanglu-archive-keyring/tanglu-archive-keyring_2013.02_all.deb
(install local packages using dpkg)

=== 2. Set up buildd user ===
Create new buildd user:
 adduser --home=/srv/buildd --ingroup sbuild buildd
Give it sudo permission by creating /etc/sudoers.d/buildd with content:
 buildd ALL=NOPASSWD: /usr/sbin/cowbuilder, /usr/sbin/chroot

NOTE: The user name and HOME path are currently hardcoded in some scripts, so please don't change them.

=== 3. Create base environments ===
Create sbuild base environments (for the bartholomea curent development branch) using one of the following commands:
 :: i386 builder:
   sbuild-createchroot --arch=i386 --make-sbuild-tarball=/var/lib/sbuild/staging-i386.tar.gz bartholomea `mktemp -d` http://archive.tanglu.org/tanglu

 :: amd64 builder:
   sbuild-createchroot --arch=amd64 --make-sbuild-tarball=/var/lib/sbuild/staging-amd64.tar.gz aequorea `mktemp -d` http://archive.tanglu.org/tanglu

The builders must have one amd64 and one i386 environment to be able to build packages for both architectures.

Move the file /etc/schroot/chroot.d/bartholomea-* to /etc/schroot/chroot.d/staging-<arch>, where <arch> is the architecture of
this environment.
Then open the file and rename the header block to "staging-<arch>" as well. You should als fix the "description" field of that file.

Then log into the newly created environment:
 sbuild-shell staging-<arch>
(replace arch with the desired architecture)
then open /etc/apt/sources.list and add the following lines:
 deb http://archive.tanglu.org/tanglu staging main contrib non-free
 #deb-src http://archive.tanglu.org/tanglu staging main contrib non-free
Then exit the environment.
Change to the buildd user and execute:
 sbuild-update --keygen
Sbuild should now be set up.

=== 4. Generate builder key ===
Login as buildd (su buildd)
Use gpg --gen-key to create a new key. Select RSA(4) and a length of 4096 bit.
You got the name of an element as buildd name.
The name for the key is: "<arch> <element> Buildd", e.g. "amd64 Helium Buildd"
If your buildd is able to perform builds for both Tanglu architectures, please omit the <arch> part.
Set an email address in form of <arch>-<name>@buildd.tanglu.org, e.g. i386-beryllium@buildd.tanglu.org for the key.
(For multi-arch builders, the keyname would be "Tanglu Helium Buildd" here, and the email address "beryllium@buildd.tanglu.org")
Set expiration date to 1-3 years, don't use a passphrase.

The rng-tools and urandom may help if you don't have enough entropy (use with care and inform yourself about what these tools do
before using them!).

=== 6. Install buildd software ===
Clone the Tanglu debile software:
 git clone git://gitorious.org/tanglu/debile.git debile-git
(ideally in /srv/buildd)

Then create a new Python virtualenv in the cloned debile directory:
 virtualenv --system-site-packages ENV
Activate the virtualenv:
 source ENV/bin/activate
Then install other dependencies:
 pip install -r requirements-slave.txt
Then run:
 make develop
 (FIXME: Better use "productive" and slave-only setting here?)

Please keep the Git clone up-to-date and install new software versions from time to time.

=== 7. Configure buildd software ===
Create /etc/debile/slave.yaml using the template below.
Change the file to match your builder specifications.
You will have to set GPGKEY_FINGERPRINT to the full fingerpint of the GPG-key you created
for this builder.
### FILE STARTS ###
---
xmlrpc:
    user: "%helium.buildd.tanglu.org"
    host: buildd.tanglu.org
    port: 22017
    keyfile: /srv/buildd/helium.key
    certfile: /srv/buildd/helium.crt

gpg: GPGKEY_FINGERPRINT

dput:
    host: tanglu

checks:
    - lintian
    - build

arches:
    - amd64
    - all

suites:
    - staging

components:
    - main
    - contrib
    - non-free
### EOF ###
Set user to <builder>.buildd.tanglu.org, where builder is the name of your builder. The name must be prefixed with
a percentage sign.
Then, you can generate the key and cert defined above, using OpenSSL:
 $ openssl req -x509 -nodes -newkey rsa:3072 -sha256 -keyout testslave.key -out testslave.crt
(it's a good idea to use the name of your builder for the key name)
File out the information. The "Organization" is "Tanglu Project", "Unit Name" is "Package Build Service".
Use the "<builder>.buildd.tanglu.org" string as FQDN (of course with "<builder>" replaced with the builder's name)

You will also add the tanglu-buildd certificate to the database of trusted certificates.
To do that, copy tanglu-buildd.crt to /usr/local/share/ca-certificates/, then run
 update-ca-certificates
as root.

=== 8. Configure dput-ng ===
Create /etc/dput.d/profiles/tanglu.json with the following data:
### BEGIN FILE ###
{
    "fqdn": "ftp-master.tanglu.org",
    "incoming": "~/incoming/",
    "login": "anonymous",
    "meta": "boring",
    "method": "ftp"
}
### EOF ###

=== 9. Create initscript for debile-slave ===
TODO

=== 10. Register the buildd ===
Tell the build-master admin (currently Matthias Klumpp <mak@debian.org>) about the new buildd and give him or the build admin team access
to the machine.
In the process, some generic settings will be checked and we will perform a testbuild, then add the machine to the buildd pool and register it's key
with the archive kit.
Don't forget to send your SSL certificate generated in step 7 with your mail, so we can add it to the build master's keyring and allow your slave to connect.

And you're done!

NOTE: Check if builds work before disabling maintenance mode on the buildmaster!
